name: CI

on:
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - 'docs/**'
  push:
    branches:
      - '*'
    paths-ignore:
      - 'docs/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-12.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-12.x
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Lint the code
        run: npm run lint --if-present
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-${{ matrix.node-version }}
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Build the project
        run: npm run build --if-present
      - name: Run tests
        run: npm run test:cov
        env:
          CI: true
      - name: Upload code coverage
        uses: codecov/codecov-action@v1.0.13
        if: matrix.node-version == '12.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: Node.js ${{ matrix.node-version }}
          flags: unittests
  release:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/beta'

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-12.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-12.x
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Create new release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with:
          extra_plugins: |
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Login to DockerHub Registry
        if: steps.semantic.outputs.new_release_published == 'true'
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: crazy-max/ghaction-docker-buildx@v3.3.0
        with:
          buildx-version: latest
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.OS }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.OS }}-buildx-
      - name: Run Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        run: docker buildx build --cache-from "type=local,src=/tmp/.buildx-cache" --cache-to "type=local,dest=/tmp/.buildx-cache" --build-arg ROOM_ASSISTANT_VERSION=${{steps.semantic.outputs.new_release_version}} --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 -t mkerix/room-assistant:${{steps.semantic.outputs.new_release_version}} -t mkerix/room-assistant:$([[ "${{steps.semantic.outputs.new_release_version}}" == *"beta"* ]] && echo "beta" || echo "latest") --push .
      - name: Update description on DockerHub
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: peter-evans/dockerhub-description@v2.4.0
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_REPOSITORY: mkerix/room-assistant
